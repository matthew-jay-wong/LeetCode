package io.github.matthewjaywong.java.projecteuler;

import java.util.HashMap;
import java.util.Map;

/**
 * <h1>
 * <a href="https://projecteuler.net/problem=2">Problem 2: Even Fibonacci Numbers</a>
 * </h1>
 * <h2>
 * Difficulty: 5%
 * </h2>
 * <p>Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with $1$ and $2$, the first $10$ terms will be:
 * $$1, 2, 3, 5, 8, 13, 21, 34, 55, 89, \dots$$</p>
 * <p>By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.</p>
 */
public class Problem2 {
    public static void main(String[] args) {
        Problem2 problem2 = new Problem2();
        System.out.println(problem2.solution(4_000_000));
    }

    private static final Map<Integer, Integer> memo = new HashMap<>();

    private int nthFibonacci(int n) {
        if (n == 1)
            return 1;

        if (n == 2)
            return 2;

        if (memo.containsKey(n))
            return memo.get(n);

        int nth = nthFibonacci(n - 1) + nthFibonacci(n - 2);
        memo.put(n, nth);
        return nth;
    }

    public int solution(int num) {
        int res = 0;
        int i = 1;
        int nth = nthFibonacci(i);
        while (nth < num) {
            if (nth % 2 == 0)
                res += nth;

            nth = nthFibonacci(++i);
        }

        return res;
    }
}
