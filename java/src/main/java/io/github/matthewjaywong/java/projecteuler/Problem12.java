package io.github.matthewjaywong.java.projecteuler;

import java.math.BigDecimal;
import java.math.MathContext;
import java.util.*;

/**
 * <h1>
 * <a href="https://projecteuler.net/problem=12">Problem 12: Highly Divisible Triangular Number</a>
 * </h1>
 * <h2>
 * Difficulty: 5%
 * </h2>
 * <p>The sequence of triangle numbers is generated by adding the natural numbers. So the $7$<sup>th</sup> triangle number would be $1 + 2 + 3 + 4 + 5 + 6 + 7 = 28$. The first ten terms would be:
 * $$1, 3, 6, 10, 15, 21, 28, 36, 45, 55, \dots$$</p>
 * <p>Let us list the factors of the first seven triangle numbers:</p>
 * \begin{align}
 * \mathbf 1 &amp;\colon 1\\
 * \mathbf 3 &amp;\colon 1,3\\
 * \mathbf 6 &amp;\colon 1,2,3,6\\
 * \mathbf{10} &amp;\colon 1,2,5,10\\
 * \mathbf{15} &amp;\colon 1,3,5,15\\
 * \mathbf{21} &amp;\colon 1,3,7,21\\
 * \mathbf{28} &amp;\colon 1,2,4,7,14,28
 * \end{align}
 * <p>We can see that $28$ is the first triangle number to have over five divisors.</p>
 * <p>What is the value of the first triangle number to have over five hundred divisors?</p>
 */
public class Problem12 {
    public static void main(String[] args) {
        Problem12 problem12 = new Problem12();
        System.out.println(problem12.solution(500));
    }

    public BigDecimal solution(int n) {

        BigDecimal i = BigDecimal.valueOf(1);
        BigDecimal f = BigDecimal.valueOf(1);
        int factorCount = 1;
        int max = factorCount;

        while (factorCount < n) {
            i = i.add(BigDecimal.ONE);
            f = f.add(i);

            factorCount = 0;
            for (BigDecimal potentialFactor = BigDecimal.ONE; potentialFactor.compareTo(f.sqrt(MathContext.DECIMAL128)) <= 0; potentialFactor = potentialFactor.add(BigDecimal.ONE)) {
                if (f.divideAndRemainder(potentialFactor)[1].compareTo(BigDecimal.ZERO) == 0)
                    factorCount += 2;
            }
            if (factorCount > max) {
                System.out.println(factorCount);
                max = factorCount;
            }
        }

        return f;
    }
}
